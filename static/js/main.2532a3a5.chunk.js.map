{"version":3,"sources":["utils.ts","state/GraphState.tsx","colorForScore.tsx","GraphStateTable.tsx","state/ComputeState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["replaceSearchParams","href","params","newUrl","URL","search","urlParams","URLSearchParams","Object","entries","forEach","_ref","_ref2","slicedToArray","key","value","append","toString","buildQueryString","round2Digits","number","Math","round","GraphState","vertexNames","scoreMatrix","classCallCheck","this","createClass","hgs","vertexNameSet","Set","keys","edgeStr","_parseEdge","parseEdge","_parseEdge2","vertex1","vertex2","add","Array","from","sort","vertexIndexByName","reduce","previous","vertexName","index","state","_parseEdge3","_parseEdge4","withScore100","x","y","score100","length","nbVertex","withVertexNames","slice","range","map","i","letter","vertexIndex","newScore","Error","matrix","newRow","toConsumableArray","normalize","newScores","e","console","log","n","confidenceScore","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","score","max","min","edgeScores","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","String","fromCharCode","charCodeAt","edge","verticesInEdge","split","red","tinycolor","hueDelta","toHsv","h","colors","redHsv","objectSpread","toRgbString","colorForScore100","rounded","GraphStateTable","graphState","onGraphStateChange","react_default","a","createElement","colIndex","rowIndex","style","backgroundColor","TextField","inputProps","step","type","onChange","Number","target","isNaN","initialState","iterations","computeNextComputeState","computeState","nextIterationIndex","lastIteration","concat","computeNextIteration","needsAnotherIteration","k","newState","j","ijScore","score1","EDGES_PARAM","graphStateFromUrl","window","location","has","fromEdgeScores","JSON","parse","get","emptyGraph","DELAY_PARAM","delayFromUrl","AUTO_COMPUTE_PARAM","autoComputeFromUrl","ConfidenceScore","Typography","variant","Boolean","hostname","match","ReactDOM","render","_React$useState","React","useState","_React$useState2","autoCompute","setAutoCompute","_React$useState3","_React$useState4","inputState","setInputState","_React$useState5","_React$useState6","toCompute","setToCompute","_React$useState7","_React$useState8","delay","setDelay","_React$useState9","_React$useState10","setComputeState","handleInputStateChange","useEffect","_searchParams","searchParams","defineProperty","stringify","toEdgeScores","originalHref","newHref","history","pushState","synchronizeUrl","timeoutId","createInitialComputeState","setTimeout","iterate","clearTimeout","className","display","height","label","withNbVertex","Button","onClick","withResetedScores","GraphStateTable_GraphStateTable","App_ConfidenceScore","computeConfidenceScore","FormControlLabel","control","Checkbox","checked","disabled","_","reverseIndex","iterationState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2532a3a5.chunk.js","sourcesContent":["export { range } from \"lodash\";\n\nexport type SearchParams = { [param: string]: string };\nexport const buildQueryString = (params: SearchParams) => {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) =>\n    urlParams.append(key, value)\n  );\n  return urlParams.toString();\n};\n\nexport const replaceSearchParams = (\n  href: string,\n  params: SearchParams\n): string => {\n  const newUrl = new URL(href);\n  newUrl.search = buildQueryString(params);\n  return newUrl.href;\n};\n\nexport const round2Digits = (number: number) => {\n  return Math.round(number * 100) / 100;\n};\n","import { range } from \"../utils\";\n\n// export type GraphState = {\n//   nbVertex: number;\n//   scoreMatrix: ScoreMatrix;\n// };\n\nexport type ScoreMatrix = number[][];\n\nexport class GraphState {\n  public static fromEdgeScores(hgs: EdgeScores) {\n    const vertexNameSet = new Set<string>();\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      vertexNameSet.add(vertex1);\n      vertexNameSet.add(vertex2);\n    });\n    const vertexNames = Array.from(vertexNameSet).sort();\n    type VertexIndexByName = {\n      [vertexName: string]: number;\n    };\n    const vertexIndexByName: VertexIndexByName = vertexNames.reduce(\n      (previous: VertexIndexByName, vertexName, index) => {\n        previous[vertexName] = index;\n        return previous;\n      },\n      {}\n    );\n\n    let state = new GraphState(vertexNames, []);\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      state = state.withScore100(\n        vertexIndexByName[vertex1],\n        vertexIndexByName[vertex2],\n        hgs[edgeStr]\n      );\n    });\n\n    return state;\n  }\n\n  constructor(\n    private vertexNames: string[],\n    private readonly scoreMatrix: ScoreMatrix\n  ) {}\n\n  public score100(x: number, y: number): number {\n    if (x === y) {\n      return 100;\n    }\n    if (x > y) {\n      return this.score100(y, x);\n    }\n    const row = this.scoreMatrix[x] || [];\n    return row[y] || 0;\n  }\n\n  public score1(x: number, y: number): number {\n    return this.score100(x, y) / 100;\n  }\n\n  public nbVertex() {\n    return this.vertexNames.length;\n  }\n\n  public withNbVertex(nbVertex: number): GraphState {\n    if (nbVertex < this.vertexNames.length) {\n      return this.withVertexNames(this.vertexNames.slice(0, nbVertex));\n    } else {\n      return this.withVertexNames(range(nbVertex).map(i => letter(i)));\n    }\n  }\n  public withVertexNames(vertexNames: string[]): GraphState {\n    return new GraphState(vertexNames, this.scoreMatrix);\n  }\n\n  public vertexName(vertexIndex: number): string {\n    return this.vertexNames[vertexIndex];\n  }\n\n  public withScore100(x: number, y: number, newScore: number): GraphState {\n    if (x === y) {\n      throw new Error(\"Score not modifiable\");\n    }\n    if (x > y) {\n      return this.withScore100(y, x, newScore);\n    } else {\n      try {\n        const matrix = this.scoreMatrix;\n        const newRow = [...(matrix[x] || [])];\n        newRow[y] = this.normalize(newScore);\n        const newScores = [...matrix];\n        newScores[x] = newRow;\n        return new GraphState(this.vertexNames, newScores);\n      } catch (e) {\n        console.log(e);\n        throw e;\n      }\n    }\n  }\n\n  public withResetedScores(): GraphState {\n    return new GraphState(this.vertexNames, []);\n  }\n\n  public computeConfidenceScore() {\n    const n = this.nbVertex();\n    let confidenceScore = 0;\n\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const newLocal = this.score100(x, y);\n        confidenceScore += newLocal || 0;\n      }\n    }\n    return confidenceScore / ((n * (n - 1)) / 2);\n  }\n\n  private normalize(score: number): number {\n    return Math.max(Math.min(score, 100), 0);\n  }\n\n  public toEdgeScores(): EdgeScores {\n    const edgeScores: EdgeScores = {};\n    const n = this.nbVertex();\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const score = this.score100(x, y);\n        if (score !== 0) {\n          const edgeStr = this.vertexName(x) + \"-\" + this.vertexName(y);\n          edgeScores[edgeStr] = score;\n        }\n      }\n    }\n    return edgeScores;\n  }\n}\n\nexport const isModifiable = (x: number, y: number) => {\n  return x < y;\n};\n\nexport const emptyGraph = (nbVertex: number): GraphState => {\n  const vertexNames = range(nbVertex).map(i => letter(i));\n  return new GraphState(vertexNames, []);\n};\n\nexport const vertexName = (\n  graphState: GraphState,\n  vertexIndex: number\n): string => {\n  return graphState.vertexName(vertexIndex);\n};\n\nconst letter = (index: number) => {\n  return String.fromCharCode(\"A\".charCodeAt(0) + index);\n};\n\ntype EdgeScores = {\n  [edge: string]: number;\n};\n\nconst parseEdge = (edge: string): [string, string] => {\n  const verticesInEdge = edge.split(\"-\");\n  if (verticesInEdge.length !== 2) {\n    throw new Error(\n      \"Invalid edge def \" + edge + \". It must be of form <Node1>-<Node2>\"\n    );\n  }\n  const vertex1 = verticesInEdge[0];\n  const vertex2 = verticesInEdge[1];\n  if (vertex1 === vertex2) {\n    throw new Error(\"Edge def \" + edge + \" uses twice the same node\");\n  }\n  if (vertex1 < vertex2) {\n    return [vertex1, vertex2];\n  } else {\n    return [vertex2, vertex1];\n  }\n};\n","import { range } from \"./utils\";\nimport tinycolor from \"tinycolor2\";\nconst red = tinycolor(\"red\");\nconst green = tinycolor(\"green\");\nconst hueDelta = green.toHsv().h - red.toHsv().h;\nconst colors = range(100).map(i => {\n  const redHsv = red.toHsv();\n  return tinycolor({\n    ...redHsv,\n    h: redHsv.h + (hueDelta * i) / 100\n  }).toRgbString();\n});\n// console.log(\"colors:\", colors, \"hueDelta\", hueDelta);\nexport const colorForScore100 = (score100: number) => {\n  const rounded = Math.round(score100);\n  if (rounded === 0) {\n    return \"\";\n  }\n  return colors[rounded - 1];\n};\n\nexport const colorForScore1 = (score1: number) => {\n  return colorForScore100(score1 * 100);\n};\n","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\n\nimport { colorForScore100 } from \"./colorForScore\";\nimport { GraphState, isModifiable } from \"./state/GraphState\";\nimport { range, round2Digits } from \"./utils\";\n\nexport const GraphStateTable = ({\n  graphState,\n  onGraphStateChange\n}: {\n  graphState: GraphState;\n  onGraphStateChange?: (newState: GraphState) => void;\n}) => (\n  <table>\n    <thead>\n      <tr>\n        <td />\n        {range(graphState.nbVertex()).map(\n          (colIndex: number) =>\n            colIndex >= 1 && (\n              <td key={colIndex}>{graphState.vertexName(colIndex)}</td>\n            )\n        )}\n      </tr>\n    </thead>\n    <tbody>\n      {range(graphState.nbVertex()).map(\n        (rowIndex: number) =>\n          rowIndex < graphState.nbVertex() - 1 && (\n            <tr key={rowIndex}>\n              <td>{graphState.vertexName(rowIndex)}</td>\n              {range(graphState.nbVertex()).map(\n                (colIndex: number) =>\n                  colIndex >= 1 &&\n                  (isModifiable(rowIndex, colIndex) ? (\n                    <td\n                      key={colIndex}\n                      style={{\n                        backgroundColor: colorForScore100(\n                          graphState.score100(rowIndex, colIndex)\n                        )\n                      }}\n                    >\n                      {onGraphStateChange ? (\n                        <TextField\n                          inputProps={{\n                            min: \"0\",\n                            max: \"100\",\n                            step: \"5\"\n                          }}\n                          type=\"number\"\n                          value={graphState.score100(rowIndex, colIndex)}\n                          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newScore = Number(e.target.value);\n                            if (!isNaN(newScore)) {\n                              onGraphStateChange(\n                                graphState.withScore100(\n                                  rowIndex,\n                                  colIndex,\n                                  newScore\n                                )\n                              );\n                            }\n                          }}\n                        />\n                      ) : (\n                        <div>\n                          {round2Digits(\n                            graphState.score100(rowIndex, colIndex)\n                          )}\n                        </div>\n                      )}\n                    </td>\n                  ) : (\n                    <td key={colIndex}></td>\n                  ))\n              )}\n            </tr>\n          )\n      )}\n    </tbody>\n  </table>\n);\n","import { GraphState } from \"./GraphState\";\nimport { range } from \"../utils\";\nexport type ComputeState = {\n  iterations: GraphState[];\n};\n\nexport const initialState = (initialState: GraphState): ComputeState => ({\n  iterations: [initialState]\n});\n\nexport const computeNextComputeState = (computeState: ComputeState) => {\n  const nextIterationIndex = computeState.iterations.length;\n  const lastIteration = computeState.iterations[nextIterationIndex - 1];\n  return {\n    iterations: [\n      ...computeState.iterations,\n      computeNextIteration(lastIteration, nextIterationIndex - 1)\n    ]\n  };\n};\n\nexport const needsAnotherIteration = (computeState: ComputeState) => {\n  return computeState.iterations.length < computeState.iterations[0].nbVertex();\n};\n\n// Floyd-Warshall algorithm\n// https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm\nconst computeNextIteration = (\n  graphState: GraphState,\n  k: number\n): GraphState => {\n  // Something IS WRONG!!!\n  // http://localhost:3000/?delay=0&edges=%7B%22A-B%22%3A100%2C%22A-C%22%3A100%2C%22A-D%22%3A100%2C%22A-E%22%3A100%2C%22A-F%22%3A100%2C%22A-G%22%3A100%7D\n\n  console.log(\"iteration\" + k);\n  let newState = graphState;\n  for (let i of range(newState.nbVertex())) {\n    for (let j of range(newState.nbVertex())) {\n      const ijScore = newState.score1(i, j);\n      const ikScore = newState.score1(i, k);\n      const kjScore = newState.score1(k, j);\n      const newScore = ikScore * kjScore;\n      if (ijScore < newScore) {\n        // FIXME we should not do rounding hre\n        newState = newState.withScore100(i, j, newScore * 100);\n      }\n    }\n  }\n  console.log(\"graphState\", graphState, \"newGrpahState\", newState);\n  return newState;\n};\n","import {\n  Button,\n  TextField,\n  Typography,\n  Checkbox,\n  FormControlLabel\n} from \"@material-ui/core\";\nimport React, { ChangeEvent, useEffect } from \"react\";\n\nimport { emptyGraph, GraphState } from \"./state/GraphState\";\nimport { GraphStateTable } from \"./GraphStateTable\";\nimport { SearchParams, replaceSearchParams, round2Digits } from \"./utils\";\nimport {\n  ComputeState,\n  initialState as createInitialComputeState,\n  computeNextComputeState,\n  needsAnotherIteration\n} from \"./state/ComputeState\";\nimport { colorForScore100 } from \"./colorForScore\";\n\nconst EDGES_PARAM = \"edges\";\nconst graphStateFromUrl = (): GraphState => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(EDGES_PARAM)) {\n    try {\n      return GraphState.fromEdgeScores(\n        JSON.parse(params.get(EDGES_PARAM) as string)\n      );\n    } catch (e) {}\n  }\n  return emptyGraph(7);\n};\n\nconst DELAY_PARAM = \"delay\";\nconst delayFromUrl = (): number => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(DELAY_PARAM)) {\n    try {\n      return Number(params.get(DELAY_PARAM));\n    } catch (e) {}\n  }\n  return 300;\n};\n\nconst AUTO_COMPUTE_PARAM = \"auto\";\nconst autoComputeFromUrl = (): boolean => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(AUTO_COMPUTE_PARAM)) {\n    return params.get(AUTO_COMPUTE_PARAM) === \"true\";\n  }\n  return false;\n};\n\nexport default function App() {\n  const [autoCompute, setAutoCompute] = React.useState(autoComputeFromUrl());\n  const [inputState, setInputState] = React.useState<GraphState>(\n    graphStateFromUrl()\n  );\n  const [toCompute, setToCompute] = React.useState<GraphState | null>(\n    autoCompute ? inputState : null\n  );\n  const [delay, setDelay] = React.useState(delayFromUrl());\n  const [computeState, setComputeState] = React.useState<ComputeState | null>(\n    null\n  );\n\n  const handleAutoComputeChange = (autoCompute: boolean): void => {\n    setAutoCompute(autoCompute);\n    if (autoCompute) {\n      setToCompute(inputState);\n    }\n  };\n\n  const handleInputStateChange = (state: GraphState): void => {\n    setInputState(state);\n    if (autoCompute) {\n      setToCompute(state);\n    }\n  };\n\n  useEffect(() => {\n    synchronizeUrl(delay, autoCompute, inputState);\n  }, [inputState, autoCompute, delay]);\n\n  useEffect(() => {\n    if (toCompute === null) {\n      return;\n    }\n    let computeState = createInitialComputeState(toCompute);\n    setComputeState(computeState);\n    let timeoutId: any;\n\n    const iterate = () => {\n      computeState = computeNextComputeState(computeState);\n      setComputeState(computeState);\n\n      if (needsAnotherIteration(computeState)) {\n        timeoutId = setTimeout(iterate, delay);\n      }\n    };\n    if (needsAnotherIteration(computeState)) {\n      timeoutId = setTimeout(iterate, delay);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [toCompute, delay]);\n\n  const handleComputeNow = () => {\n    setToCompute(inputState);\n  };\n  return (\n    <div className=\"App\" style={{ display: \"flex\", height: \"1vh\" }}>\n      <div>\n        <Typography variant=\"h6\">Input</Typography>\n        <TextField\n          label=\"Node Count\"\n          type=\"number\"\n          value={inputState.nbVertex()}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const nbVertex = Number(e.target.value);\n            if (!isNaN(nbVertex)) {\n              handleInputStateChange(inputState.withNbVertex(nbVertex));\n            }\n          }}\n        />\n        <Button\n          onClick={() => {\n            handleInputStateChange(inputState.withResetedScores());\n          }}\n        >\n          Clear Scores\n        </Button>\n\n        <GraphStateTable\n          graphState={inputState}\n          onGraphStateChange={handleInputStateChange}\n        />\n        <ConfidenceScore\n          confidenceScore={inputState.computeConfidenceScore()}\n        />\n        <pre>{JSON.stringify(inputState.toEdgeScores(), null, \"  \")}</pre>\n      </div>\n\n      <div>\n        <Typography variant=\"h6\">New Confidence Score</Typography>\n        <div>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={autoCompute}\n                onChange={(e: any, checked: boolean) => {\n                  handleAutoComputeChange(checked);\n                }}\n              />\n            }\n            label=\"Auto Compute\"\n          />\n\n          {!autoCompute && (\n            <Button\n              onClick={handleComputeNow}\n              disabled={\n                computeState ? needsAnotherIteration(computeState) : false\n              }\n            >\n              Compute now\n            </Button>\n          )}\n          <TextField\n            label=\"Iteartion Delay\"\n            type=\"number\"\n            disabled={\n              computeState ? needsAnotherIteration(computeState) : false\n            }\n            value={delay}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const delay = Number(e.target.value);\n              if (!isNaN(delay)) {\n                setDelay(delay);\n              }\n            }}\n          />\n        </div>\n\n        {computeState &&\n          computeState.iterations.map((_, i) => {\n            const reverseIndex = computeState.iterations.length - i - 1;\n            const iterationState = computeState.iterations[reverseIndex];\n\n            return (\n              <div key={reverseIndex}>\n                <h3>\n                  Iteration {reverseIndex}\n                  {reverseIndex === 0 && \" (Input State)\"}\n                </h3>\n                <GraphStateTable graphState={iterationState} />\n                <ConfidenceScore\n                  confidenceScore={iterationState.computeConfidenceScore()}\n                />\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nconst ConfidenceScore = ({ confidenceScore }: { confidenceScore: number }) => (\n  <Typography variant=\"subtitle1\">\n    Confidence Score:{\" \"}\n    <span style={{ backgroundColor: colorForScore100(confidenceScore) }}>\n      {round2Digits(confidenceScore)}\n    </span>\n  </Typography>\n);\nfunction synchronizeUrl(\n  delay: number,\n  autoCompute: boolean,\n  inputState: GraphState\n) {\n  const searchParams: SearchParams = {\n    [DELAY_PARAM]: String(delay),\n    [AUTO_COMPUTE_PARAM]: String(autoCompute),\n    [EDGES_PARAM]: JSON.stringify(inputState.toEdgeScores())\n  };\n  const originalHref = window.location.href;\n  const newHref = replaceSearchParams(originalHref, searchParams);\n  if (newHref !== originalHref) {\n    window.history.pushState(\"\", \"Update Params\", newHref);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils.ts","colorForScore.tsx","graph/ForceGraph.tsx","state/GraphState.tsx","GraphStateTable.tsx","state/ComputeState.tsx","url/parseUrl.tsx","App.tsx","serviceWorker.ts","index.tsx","url/synchronizeUrl.tsx"],"names":["replaceSearchParams","href","params","newUrl","URL","search","urlParams","URLSearchParams","Object","entries","forEach","_ref","_ref2","slicedToArray","key","value","append","toString","buildQueryString","round2Digits","number","Math","round","alphaName","index","String","fromCharCode","charCodeAt","red","tinycolor","hueDelta","toHsv","h","colors","range","map","i","redHsv","objectSpread","toRgbString","colorForScore100","score100","rounded","nodeRadius","ForceGraph","graphState","_ref$width","width","_ref$height","height","svgRef","useRef","_useState","useState","_useState2","previousGraphData","setPreviousGraphData","graphData","useMemo","oldNodes","keyBy","nodes","n","nodeName","vertexNames","name","node","oldNode","x","y","nbVertex","links","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","score","push","edgeId","vertexName","source","target","err","return","buildGraphData","svgElement","current","useEffect","simulation","d3Force","force","id","distance","link","strength","svgSel","d3Selection","linkSel","attr","selectAll","data","enter","d","text","nodeGroupSel","on","concat","stop","firstChild","removeChild","react_default","a","createElement","ref","GraphState","scoreMatrix","classCallCheck","this","createClass","hgs","vertexNameSet","Set","keys","edgeStr","_parseEdge","parseEdge","_parseEdge2","vertex1","vertex2","add","Array","from","sort","vertexIndexByName","reduce","previous","state","_parseEdge3","_parseEdge4","withScore100","length","withVertexNames","slice","vertexIndex","newScore","Error","matrix","normalized","normalize","newRow","toConsumableArray","newScores","e","console","log","createEmpty","confidenceScore","max","min","edgeScores","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","edge","verticesInEdge","split","GraphStateTable","onGraphStateChange","colIndex","rowIndex","style","backgroundColor","TextField","inputProps","step","type","onChange","Number","isNaN","initialState","iterations","computeNextComputeState","computeState","nextIterationIndex","lastIteration","computeNextIteration","needsAnotherIteration","k","newState","j","ijScore","score1","EDGES_PARAM","graphStateFromUrl","window","location","has","fromEdgeScores","JSON","parse","get","DELAY_PARAM","delayFromUrl","AUTO_COMPUTE_PARAM","autoComputeFromUrl","ConfidenceScore","Typography","variant","Boolean","hostname","match","ReactDOM","render","_React$useState","React","_React$useState2","autoCompute","setAutoCompute","_React$useState3","_React$useState4","inputState","setInputState","_React$useState5","_React$useState6","toCompute","setToCompute","_React$useState7","_React$useState8","delay","setDelay","_React$useState9","_React$useState10","setComputeState","handleInputStateChange","_searchParams","searchParams","defineProperty","stringify","toEdgeScores","originalHref","newHref","history","pushState","synchronizeUrl","timeoutId","createInitialComputeState","setTimeout","iterate","clearTimeout","className","display","label","withNbVertex","Button","onClick","withResetedScores","GraphStateTable_GraphStateTable","App_ConfidenceScore","computeConfidenceScore","ForceGraph_ForceGraph","FormControlLabel","control","Checkbox","checked","disabled","_","reverseIndex","iterationState","flexDirection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9e66b3b.chunk.js","sourcesContent":["export { range } from \"lodash\";\n\nexport type SearchParams = { [param: string]: string };\nexport const buildQueryString = (params: SearchParams) => {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) =>\n    urlParams.append(key, value)\n  );\n  return urlParams.toString();\n};\n\nexport const replaceSearchParams = (\n  href: string,\n  params: SearchParams\n): string => {\n  const newUrl = new URL(href);\n  newUrl.search = buildQueryString(params);\n  return newUrl.href;\n};\n\nexport const round2Digits = (number: number) => {\n  return Math.round(number * 100) / 100;\n};\n\nexport const alphaName = (index: number) => {\n  return String.fromCharCode(\"A\".charCodeAt(0) + index);\n};\n","import { range } from \"./utils\";\nimport tinycolor from \"tinycolor2\";\nconst red = tinycolor(\"red\");\nconst green = tinycolor(\"green\");\nconst hueDelta = green.toHsv().h - red.toHsv().h;\nconst colors = range(100).map(i => {\n  const redHsv = red.toHsv();\n  return tinycolor({\n    ...redHsv,\n    h: redHsv.h + (hueDelta * i) / 100\n  }).toRgbString();\n});\n// console.log(\"colors:\", colors, \"hueDelta\", hueDelta);\nexport const colorForScore100 = (score100: number) => {\n  const rounded = Math.round(score100);\n  if (rounded === 0) {\n    return \"\";\n  }\n  return colors[rounded - 1];\n};\n\nexport const colorForScore1 = (score1: number) => {\n  return colorForScore100(score1 * 100);\n};\n","import \"./ForceGraph.css\";\nimport React, { useEffect, useRef, useMemo, useState } from \"react\";\nimport * as d3Force from \"d3-force\";\nimport { SimulationNodeDatum, SimulationLinkDatum, ForceLink } from \"d3-force\";\nimport * as d3Selection from \"d3-selection\";\n\nimport { GraphState } from \"../state/GraphState\";\nimport { range } from \"../utils\";\nimport { colorForScore100 } from \"../colorForScore\";\nimport { keyBy } from \"lodash\";\n\ntype NodeDatum = SimulationNodeDatum & {\n  nodeName: string;\n};\n\ntype LinkDatum = SimulationLinkDatum<NodeDatum> & {\n  edgeId: string;\n  score: number;\n};\n\ntype GraphData = {\n  nodes: NodeDatum[];\n  links: LinkDatum[];\n};\n\nconst buildGraphData = (\n  graphState: GraphState,\n  previousGraphData: GraphData | null\n): GraphData => {\n  const oldNodes = keyBy(\n    previousGraphData ? previousGraphData.nodes : [],\n    n => n.nodeName\n  );\n\n  const nodes: NodeDatum[] = graphState.vertexNames.map((name, index) => {\n    const node: NodeDatum = {\n      nodeName: name,\n      index: index\n    };\n    const oldNode = oldNodes[name];\n    if (oldNode) {\n      node.x = oldNode.x;\n      node.y = oldNode.y;\n    }\n    return node;\n  });\n\n  const n = graphState.nbVertex();\n  const links: LinkDatum[] = [];\n  for (let x of range(0, n)) {\n    for (let y of range(x + 1, n)) {\n      const score = graphState.score100(x, y);\n      if (score !== 0) {\n        links.push({\n          edgeId: graphState.vertexName(x) + \"-\" + graphState.vertexName(y),\n          source: graphState.vertexName(x),\n          target: graphState.vertexName(y),\n          score\n        });\n      }\n    }\n  }\n  return { links, nodes };\n};\n\nconst nodeRadius = 20;\nexport const ForceGraph = ({\n  graphState,\n  width = 400,\n  height = 400\n}: {\n  graphState: GraphState;\n  width?: number;\n  height?: number;\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  let [previousGraphData, setPreviousGraphData] = useState<GraphData | null>(\n    null\n  );\n\n  const graphData = useMemo(\n    () => buildGraphData(graphState, previousGraphData),\n    // previousGraphData is omitied on purpose here... This is a code smell but I can't figure it out\n    [graphState]\n  );\n  if (previousGraphData !== graphData) {\n    setPreviousGraphData(graphData);\n  }\n\n  const svgElement: SVGSVGElement | null = svgRef.current;\n  useEffect(() => {\n    if (svgElement === null) {\n      return;\n    }\n    const simulation = d3Force\n      .forceSimulation<NodeDatum, LinkDatum>()\n      .force(\n        \"link\",\n        d3Force\n          .forceLink()\n          .id((node: SimulationNodeDatum) => (node as NodeDatum).nodeName)\n          .distance(\n            (link: any) => 30 + (1 - (link as LinkDatum).score / 100) * 100\n          )\n      )\n      .force(\"collide\", d3Force.forceCollide(nodeRadius * 1.5))\n      .force(\"charge\", d3Force.forceManyBody().strength(() => -10))\n      .force(\"center\", d3Force.forceCenter(width / 2, height / 2));\n\n    const svgSel = d3Selection.select(svgElement);\n    const linkSel = svgSel\n      .append(\"g\")\n      .attr(\"class\", \"ForceGraph__Links\")\n      .selectAll(\"line\")\n      .data(graphData.links)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke\", (d: LinkDatum) => colorForScore100(d.score));\n    linkSel.append(\"title\").text(function(d: LinkDatum) {\n      return d.edgeId + \": \" + d.score;\n    });\n\n    const nodeGroupSel = svgSel\n      .append(\"g\")\n      .attr(\"class\", \"ForceGraph__Nodes\")\n      .selectAll(\"g\")\n      .data(graphData.nodes)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"ForceGraph__NodeGroup\");\n\n    nodeGroupSel\n      .append(\"circle\")\n      .attr(\"class\", \"ForceGraph__NodeCircle\")\n      .attr(\"cx\", nodeRadius / 2)\n      .attr(\"cy\", nodeRadius / 2)\n      .attr(\"r\", nodeRadius);\n\n    nodeGroupSel\n      .append(\"text\")\n      .attr(\"class\", \"ForceGraph__NodeText\")\n      .attr(\"x\", nodeRadius / 2)\n      .attr(\"y\", nodeRadius / 2)\n      .text(d => d.nodeName);\n\n    nodeGroupSel.append(\"title\").text(d => d.nodeName);\n    //.call(createDragCall(simulation))\n\n    simulation.nodes(graphData.nodes).on(\"tick\", ticked);\n    const forceLink = simulation.force(\"link\") as d3Force.ForceLink<\n      NodeDatum,\n      LinkDatum\n    >;\n    forceLink.links(graphData.links);\n    function ticked() {\n      linkSel\n        .attr(\"x1\", function(d: LinkDatum) {\n          return (d.source as NodeDatum).x as number;\n        })\n        .attr(\"y1\", function(d: LinkDatum) {\n          return (d.source as NodeDatum).y as number;\n        })\n        .attr(\"x2\", function(d: LinkDatum) {\n          return (d.target as NodeDatum).x as number;\n        })\n        .attr(\"y2\", function(d: LinkDatum) {\n          return (d.target as NodeDatum).y as number;\n        });\n\n      nodeGroupSel.attr(\"transform\", function(d: NodeDatum) {\n        return `translate(${(d.x as number) -\n          nodeRadius / 2},${(d.y as number) - nodeRadius / 2})`;\n      });\n    }\n    return () => {\n      simulation.stop();\n      while (svgElement.firstChild) {\n        svgElement.removeChild(svgElement.firstChild);\n      }\n      // TODO remove previous nodes?\n    };\n  }, [width, height, svgElement, graphData]);\n\n  return <svg width={width} height={height} ref={svgRef}></svg>;\n};\n","import { range, alphaName } from \"../utils\";\n\n// export type GraphState = {\n//   nbVertex: number;\n//   scoreMatrix: ScoreMatrix;\n// };\n\nexport type ScoreMatrix = ReadonlyArray<ReadonlyArray<number>>;\n\nexport class GraphState {\n  public static fromEdgeScores(hgs: EdgeScores) {\n    const vertexNameSet = new Set<string>();\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      vertexNameSet.add(vertex1);\n      vertexNameSet.add(vertex2);\n    });\n    const vertexNames = Array.from(vertexNameSet).sort();\n    type VertexIndexByName = {\n      [vertexName: string]: number;\n    };\n    const vertexIndexByName: VertexIndexByName = vertexNames.reduce(\n      (previous: VertexIndexByName, vertexName, index) => {\n        previous[vertexName] = index;\n        return previous;\n      },\n      {}\n    );\n\n    let state = new GraphState(vertexNames, []);\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      state = state.withScore100(\n        vertexIndexByName[vertex1],\n        vertexIndexByName[vertex2],\n        hgs[edgeStr]\n      );\n    });\n\n    return state;\n  }\n\n  private constructor(\n    public vertexNames: ReadonlyArray<string>,\n    private readonly scoreMatrix: ScoreMatrix\n  ) {}\n\n  public static createEmpty = (\n    vertexNames: ReadonlyArray<string>\n  ): GraphState => {\n    return new GraphState(vertexNames, []);\n  };\n  public score100(x: number, y: number): number {\n    if (x === y) {\n      return 100;\n    }\n    if (x > y) {\n      return this.score100(y, x);\n    }\n    const row = this.scoreMatrix[x] || [];\n    return row[y] || 0;\n  }\n\n  public score1(x: number, y: number): number {\n    return this.score100(x, y) / 100;\n  }\n\n  public nbVertex() {\n    return this.vertexNames.length;\n  }\n\n  public withNbVertex(nbVertex: number): GraphState {\n    if (nbVertex < this.vertexNames.length) {\n      return this.withVertexNames(this.vertexNames.slice(0, nbVertex));\n    } else {\n      return this.withVertexNames(range(nbVertex).map(alphaName));\n    }\n  }\n  public withVertexNames(vertexNames: string[]): GraphState {\n    return new GraphState(vertexNames, this.scoreMatrix);\n  }\n\n  public vertexName(vertexIndex: number): string {\n    return this.vertexNames[vertexIndex];\n  }\n\n  public withScore100(x: number, y: number, newScore: number): GraphState {\n    if (x === y) {\n      throw new Error(\"Score not modifiable\");\n    }\n    if (x > y) {\n      return this.withScore100(y, x, newScore);\n    } else {\n      try {\n        const matrix = this.scoreMatrix;\n        const normalized = this.normalize(newScore);\n        const newRow = [...(matrix[x] || [])];\n        if (normalized === newRow[y]) {\n          // No change made\n          return this;\n        } else {\n          newRow[y] = normalized;\n          const newScores = [...matrix];\n          newScores[x] = newRow;\n          return new GraphState(this.vertexNames, newScores);\n        }\n      } catch (e) {\n        console.log(e);\n        throw e;\n      }\n    }\n  }\n\n  public withResetedScores(): GraphState {\n    return GraphState.createEmpty(this.vertexNames);\n  }\n\n  public computeConfidenceScore() {\n    const n = this.nbVertex();\n    let confidenceScore = 0;\n\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const newLocal = this.score100(x, y);\n        confidenceScore += newLocal || 0;\n      }\n    }\n    return confidenceScore / ((n * (n - 1)) / 2);\n  }\n\n  private normalize(score: number): number {\n    return Math.max(Math.min(score, 100), 0);\n  }\n\n  public toEdgeScores(): EdgeScores {\n    const edgeScores: EdgeScores = {};\n    const n = this.nbVertex();\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const score = this.score100(x, y);\n        if (score !== 0) {\n          const edgeStr = this.vertexName(x) + \"-\" + this.vertexName(y);\n          edgeScores[edgeStr] = score;\n        }\n      }\n    }\n    return edgeScores;\n  }\n}\n\nexport const isModifiable = (x: number, y: number) => {\n  return x < y;\n};\n\nexport const vertexName = (\n  graphState: GraphState,\n  vertexIndex: number\n): string => {\n  return graphState.vertexName(vertexIndex);\n};\n\ntype EdgeScores = {\n  [edge: string]: number;\n};\n\nconst parseEdge = (edge: string): [string, string] => {\n  const verticesInEdge = edge.split(\"-\");\n  if (verticesInEdge.length !== 2) {\n    throw new Error(\n      \"Invalid edge def \" + edge + \". It must be of form <Node1>-<Node2>\"\n    );\n  }\n  const vertex1 = verticesInEdge[0];\n  const vertex2 = verticesInEdge[1];\n  if (vertex1 === vertex2) {\n    throw new Error(\"Edge def \" + edge + \" uses twice the same node\");\n  }\n  if (vertex1 < vertex2) {\n    return [vertex1, vertex2];\n  } else {\n    return [vertex2, vertex1];\n  }\n};\n","import { TextField } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\n\nimport { colorForScore100 } from \"./colorForScore\";\nimport { GraphState, isModifiable } from \"./state/GraphState\";\nimport { range, round2Digits } from \"./utils\";\n\nexport const GraphStateTable = ({\n  graphState,\n  onGraphStateChange\n}: {\n  graphState: GraphState;\n  onGraphStateChange?: (newState: GraphState) => void;\n}) => (\n  <table>\n    <thead>\n      <tr>\n        <td />\n        {range(graphState.nbVertex()).map(\n          (colIndex: number) =>\n            colIndex >= 1 && (\n              <td key={colIndex}>{graphState.vertexName(colIndex)}</td>\n            )\n        )}\n      </tr>\n    </thead>\n    <tbody>\n      {range(graphState.nbVertex()).map(\n        (rowIndex: number) =>\n          rowIndex < graphState.nbVertex() - 1 && (\n            <tr key={rowIndex}>\n              <td>{graphState.vertexName(rowIndex)}</td>\n              {range(graphState.nbVertex()).map(\n                (colIndex: number) =>\n                  colIndex >= 1 &&\n                  (isModifiable(rowIndex, colIndex) ? (\n                    <td\n                      key={colIndex}\n                      style={{\n                        backgroundColor: colorForScore100(\n                          graphState.score100(rowIndex, colIndex)\n                        )\n                      }}\n                    >\n                      {onGraphStateChange ? (\n                        <TextField\n                          inputProps={{\n                            min: \"0\",\n                            max: \"100\",\n                            step: \"5\"\n                          }}\n                          type=\"number\"\n                          value={graphState.score100(rowIndex, colIndex)}\n                          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newScore = Number(e.target.value);\n                            if (!isNaN(newScore)) {\n                              onGraphStateChange(\n                                graphState.withScore100(\n                                  rowIndex,\n                                  colIndex,\n                                  newScore\n                                )\n                              );\n                            }\n                          }}\n                        />\n                      ) : (\n                        <div>\n                          {round2Digits(\n                            graphState.score100(rowIndex, colIndex)\n                          )}\n                        </div>\n                      )}\n                    </td>\n                  ) : (\n                    <td key={colIndex}></td>\n                  ))\n              )}\n            </tr>\n          )\n      )}\n    </tbody>\n  </table>\n);\n","import { GraphState } from \"./GraphState\";\nimport { range } from \"../utils\";\nexport type ComputeState = {\n  iterations: GraphState[];\n};\n\nexport const initialState = (initialState: GraphState): ComputeState => ({\n  iterations: [initialState]\n});\n\nexport const computeNextComputeState = (computeState: ComputeState) => {\n  const nextIterationIndex = computeState.iterations.length;\n  const lastIteration = computeState.iterations[nextIterationIndex - 1];\n  return {\n    iterations: [\n      ...computeState.iterations,\n      computeNextIteration(lastIteration, nextIterationIndex - 1)\n    ]\n  };\n};\n\nexport const needsAnotherIteration = (computeState: ComputeState) => {\n  return computeState.iterations.length < computeState.iterations[0].nbVertex();\n};\n\n// Floyd-Warshall algorithm\n// https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm\nconst computeNextIteration = (\n  graphState: GraphState,\n  k: number\n): GraphState => {\n  // Something IS WRONG!!!\n  // http://localhost:3000/?delay=0&edges=%7B%22A-B%22%3A100%2C%22A-C%22%3A100%2C%22A-D%22%3A100%2C%22A-E%22%3A100%2C%22A-F%22%3A100%2C%22A-G%22%3A100%7D\n\n  console.log(\"iteration\" + k);\n  let newState = graphState;\n  for (let i of range(newState.nbVertex())) {\n    for (let j of range(newState.nbVertex())) {\n      const ijScore = newState.score1(i, j);\n      const ikScore = newState.score1(i, k);\n      const kjScore = newState.score1(k, j);\n      const newScore = ikScore * kjScore;\n      if (ijScore < newScore) {\n        // FIXME we should not do rounding hre\n        newState = newState.withScore100(i, j, newScore * 100);\n      }\n    }\n  }\n  console.log(\"graphState\", graphState, \"newGrpahState\", newState);\n  return newState;\n};\n","import { GraphState } from \"../state/GraphState\";\nimport { alphaName, range } from \"../utils\";\n\nexport const EDGES_PARAM = \"edges\";\nexport const graphStateFromUrl = (): GraphState => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(EDGES_PARAM)) {\n    try {\n      return GraphState.fromEdgeScores(\n        JSON.parse(params.get(EDGES_PARAM) as string)\n      );\n    } catch (e) {}\n  }\n  return GraphState.createEmpty(range(0, 7).map(alphaName));\n};\n\nexport const DELAY_PARAM = \"delay\";\nexport const delayFromUrl = (): number => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(DELAY_PARAM)) {\n    try {\n      return Number(params.get(DELAY_PARAM));\n    } catch (e) {}\n  }\n  return 300;\n};\n\nexport const AUTO_COMPUTE_PARAM = \"auto\";\nexport const autoComputeFromUrl = (): boolean => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(AUTO_COMPUTE_PARAM)) {\n    return params.get(AUTO_COMPUTE_PARAM) === \"true\";\n  }\n  return false;\n};\n","import {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport React, { ChangeEvent, useEffect } from \"react\";\n\nimport { colorForScore100 } from \"./colorForScore\";\nimport { ForceGraph } from \"./graph/ForceGraph\";\nimport { GraphStateTable } from \"./GraphStateTable\";\nimport {\n  computeNextComputeState,\n  ComputeState,\n  initialState as createInitialComputeState,\n  needsAnotherIteration\n} from \"./state/ComputeState\";\nimport { GraphState } from \"./state/GraphState\";\nimport {\n  autoComputeFromUrl,\n  delayFromUrl,\n  graphStateFromUrl\n} from \"./url/parseUrl\";\nimport { synchronizeUrl } from \"./url/synchronizeUrl\";\nimport { round2Digits } from \"./utils\";\n\nexport default function App() {\n  const [autoCompute, setAutoCompute] = React.useState(autoComputeFromUrl());\n  const [inputState, setInputState] = React.useState<GraphState>(\n    graphStateFromUrl()\n  );\n  const [toCompute, setToCompute] = React.useState<GraphState | null>(\n    autoCompute ? inputState : null\n  );\n  const [delay, setDelay] = React.useState(delayFromUrl());\n  const [computeState, setComputeState] = React.useState<ComputeState | null>(\n    null\n  );\n\n  const handleAutoComputeChange = (autoCompute: boolean): void => {\n    setAutoCompute(autoCompute);\n    if (autoCompute) {\n      setToCompute(inputState);\n    }\n  };\n\n  const handleInputStateChange = (state: GraphState): void => {\n    setInputState(state);\n    if (autoCompute) {\n      setToCompute(state);\n    }\n  };\n\n  useEffect(() => {\n    synchronizeUrl(delay, autoCompute, inputState);\n  }, [inputState, autoCompute, delay]);\n\n  useEffect(() => {\n    if (toCompute === null) {\n      return;\n    }\n    let computeState = createInitialComputeState(toCompute);\n    setComputeState(computeState);\n    let timeoutId: any;\n\n    const iterate = () => {\n      computeState = computeNextComputeState(computeState);\n      setComputeState(computeState);\n\n      if (needsAnotherIteration(computeState)) {\n        timeoutId = setTimeout(iterate, delay);\n      }\n    };\n    if (needsAnotherIteration(computeState)) {\n      timeoutId = setTimeout(iterate, delay);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [toCompute, delay]);\n\n  const handleComputeNow = () => {\n    setToCompute(inputState);\n  };\n  return (\n    <div className=\"App\" style={{ display: \"flex\", height: \"1vh\" }}>\n      <div>\n        <Typography variant=\"h5\">Input</Typography>\n        <TextField\n          label=\"Node Count\"\n          type=\"number\"\n          value={inputState.nbVertex()}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const nbVertex = Number(e.target.value);\n            if (!isNaN(nbVertex)) {\n              handleInputStateChange(inputState.withNbVertex(nbVertex));\n            }\n          }}\n        />\n        <Button\n          onClick={() => {\n            handleInputStateChange(inputState.withResetedScores());\n          }}\n        >\n          Clear Scores\n        </Button>\n\n        <GraphStateTable\n          graphState={inputState}\n          onGraphStateChange={handleInputStateChange}\n        />\n        <ConfidenceScore\n          confidenceScore={inputState.computeConfidenceScore()}\n        />\n        <pre>{JSON.stringify(inputState.toEdgeScores(), null, \"  \")}</pre>\n        <ForceGraph graphState={inputState}></ForceGraph>\n      </div>\n\n      <div>\n        <Typography variant=\"h5\">New Confidence Score</Typography>\n        <div>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={autoCompute}\n                onChange={(e: any, checked: boolean) => {\n                  handleAutoComputeChange(checked);\n                }}\n              />\n            }\n            label=\"Auto Compute\"\n          />\n\n          {!autoCompute && (\n            <Button\n              onClick={handleComputeNow}\n              disabled={\n                computeState ? needsAnotherIteration(computeState) : false\n              }\n            >\n              Compute now\n            </Button>\n          )}\n          <TextField\n            label=\"Iteartion Delay\"\n            type=\"number\"\n            disabled={\n              computeState ? needsAnotherIteration(computeState) : false\n            }\n            value={delay}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const delay = Number(e.target.value);\n              if (!isNaN(delay)) {\n                setDelay(delay);\n              }\n            }}\n          />\n        </div>\n\n        {computeState &&\n          computeState.iterations.map((_, i) => {\n            const reverseIndex = computeState.iterations.length - i - 1;\n            const iterationState = computeState.iterations[reverseIndex];\n\n            return (\n              <div\n                key={reverseIndex}\n                style={{ display: \"flex\", flexDirection: \"row\" }}\n              >\n                <div>\n                  <Typography variant=\"h6\">Iteration {reverseIndex}</Typography>\n                  <Typography variant=\"subtitle1\">\n                    {reverseIndex === 0\n                      ? \"Input State\"\n                      : \"Using paths through node \" +\n                        iterationState.vertexName(reverseIndex) +\n                        \"\"}\n                  </Typography>\n                  <GraphStateTable graphState={iterationState} />\n\n                  <ConfidenceScore\n                    confidenceScore={iterationState.computeConfidenceScore()}\n                  />\n                </div>\n                <div>\n                  <ForceGraph graphState={iterationState} />\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nconst ConfidenceScore = ({ confidenceScore }: { confidenceScore: number }) => (\n  <Typography variant=\"subtitle1\">\n    Confidence Score:{\" \"}\n    <span style={{ backgroundColor: colorForScore100(confidenceScore) }}>\n      {round2Digits(confidenceScore)}\n    </span>\n  </Typography>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { GraphState } from \"../state/GraphState\";\nimport { replaceSearchParams, SearchParams } from \"../utils\";\nimport { AUTO_COMPUTE_PARAM, DELAY_PARAM, EDGES_PARAM } from \"./parseUrl\";\n\nexport function synchronizeUrl(\n  delay: number,\n  autoCompute: boolean,\n  inputState: GraphState\n) {\n  const searchParams: SearchParams = {\n    [DELAY_PARAM]: String(delay),\n    [AUTO_COMPUTE_PARAM]: String(autoCompute),\n    [EDGES_PARAM]: JSON.stringify(inputState.toEdgeScores())\n  };\n  const originalHref = window.location.href;\n  const newHref = replaceSearchParams(originalHref, searchParams);\n  if (newHref !== originalHref) {\n    window.history.pushState(\"\", \"Update Params\", newHref);\n  }\n}\n"],"sourceRoot":""}
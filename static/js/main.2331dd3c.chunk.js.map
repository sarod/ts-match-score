{"version":3,"sources":["utils.ts","GraphState.tsx","colorForScore.tsx","GraphStateTable.tsx","ComputeState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["range","x","items","i","score1","graphState","y","s","score100","scoreMatrix","isModifiable","withScore100","newScore","matrix","newRow","Object","toConsumableArray","newMatrix","objectSpread","e","console","log","withScore1","emptyGraph","nbVertex","computeConfidenceScore","n","confidenceScore","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","newFunction","err","return","vertexName","vertexIndex","String","fromCharCode","charCodeAt","red","tinycolor","hueDelta","toHsv","h","colors","map","redHsv","toRgbString","colorForScore100","rounded","Math","round","GraphStateTable","_ref","onGraphStateChange","react_default","a","createElement","colIndex","key","rowIndex","style","backgroundColor","TextField","inputProps","min","max","step","type","onChange","Number","target","isNaN","initialState","iterations","computeNextComputeState","computeState","nextIterationIndex","length","lastIteration","concat","computeNextIteration","needsAnotherIteration","k","currentState","j","ijScore","ConfidenceScore","Typography","variant","Boolean","window","location","hostname","match","ReactDOM","render","_React$useState","React","useState","_React$useState2","slicedToArray","inputState","setInputState","_React$useState3","_React$useState4","delay","setDelay","_React$useState5","_React$useState6","setComputeState","className","display","label","GraphStateTable_GraphStateTable","App_ConfidenceScore","Button","onClick","createInitialComputeState","setTimeout","iterate","disabled","_","reverseIndex","iterationState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2331dd3c.chunk.js","sourcesContent":["\nexport const range = (x: number): number[] => {\n    const items = [];\n    for (let i = 0; i < x; i++) {\n        items[i] = i;\n    }\n    return items;\n}\n","import { range } from \"./utils\";\n\nexport type GraphState = {\n    nbVertex: number;\n    scoreMatrix: ScoreMatrix;\n};\nexport type ScoreMatrix = number[][];\nexport const score1 = (graphState: GraphState, x: number, y: number): number => {\n    const s = score100(graphState, y, x);\n    return s ? s / 100 : s;\n};\n\nexport const score100 = (graphState: GraphState, x: number, y: number): number => {\n    if (x === y) {\n        return 100;\n    }\n    if (x > y) {\n        return score100(graphState, y, x);\n    }\n    const row = graphState.scoreMatrix[x] || [];\n    return row[y] || 0;\n};\n\nexport const isModifiable = (x: number, y: number) => {\n    return x < y;\n};\nexport const withScore100 = (\n    graphState: GraphState,\n    x: number,\n    y: number,\n    newScore: number\n): GraphState => {\n    if (isModifiable(x, y)) {\n        try {\n            const matrix = graphState.scoreMatrix;\n            const newRow = [...(matrix[x] || [])];\n            newRow[y] = newScore;\n            const newMatrix = [...matrix];\n            newMatrix[x] = newRow;\n            return {\n                ...graphState,\n                scoreMatrix: newMatrix\n            };\n        } catch (e) {\n            console.log(e);\n            throw e;\n        }\n    }\n    return graphState;\n};\n\nexport const withScore1 = (\n    graphState: GraphState,\n    x: number,\n    y: number,\n    newScore: number\n): GraphState => {\n    return withScore100(graphState, x, y, newScore ? newScore * 100 : newScore)\n};\n\n\nexport const emptyGraph = (nbVertex: number): GraphState => {\n    return { nbVertex, scoreMatrix: [] };\n}\n\nexport const computeConfidenceScore = (graphState: GraphState) => {\n    const n = graphState.nbVertex;\n    let confidenceScore = 0\n    for (let x of range(n)) {\n        for (let y of range(x)) {\n            const newLocal = newFunction(graphState, x, y);\n            confidenceScore += newLocal || 0;\n        }\n    }\n    return confidenceScore / ((n * n - 1) / 2);\n}\n\n\nexport const vertexName = (graphState: GraphState, vertexIndex: number): string => {\n    return String.fromCharCode(\"A\".charCodeAt(0) + vertexIndex);\n};\n\nfunction newFunction(graphState: GraphState, x: number, y: number) {\n    return score1(graphState, x, y);\n}\n","import { range } from './utils';\nimport tinycolor from 'tinycolor2';\nconst red = tinycolor(\"red\");\nconst green = tinycolor(\"green\");\nconst hueDelta = green.toHsv().h - red.toHsv().h;\nconst colors = range(100).map(i => {\n    const redHsv = red.toHsv();\n    return tinycolor({\n        ...redHsv,\n        h: redHsv.h + hueDelta * i / 100\n    }).toRgbString();\n});\nconsole.log(\"colors:\", colors, \"hueDelta\", hueDelta);\nexport const colorForScore100 = (score100: number) => {\n    const rounded = Math.round(score100);\n    if (rounded === 0) {\n        return '';\n    }\n    return colors[rounded - 1];\n};\n\n\nexport const colorForScore1 = (score1: number) => {\n    return colorForScore100(score1 * 100);\n};\n\n","import { TextField } from '@material-ui/core';\nimport React, { ChangeEvent } from 'react';\n\nimport { GraphState, isModifiable, vertexName, score100, withScore100 } from './GraphState';\nimport { range } from './utils';\nimport { colorForScore100 } from './colorForScore';\n\nexport const GraphStateTable = ({ graphState, onGraphStateChange }: {\n    graphState: GraphState,\n    onGraphStateChange?: (newState: GraphState) => void\n}) => <table>\n        <thead><tr>\n            <td />\n            {range(graphState.nbVertex).map((colIndex: number) => (<td key={colIndex}>{vertexName(graphState, colIndex)}</td>))}\n        </tr>\n        </thead>\n        <tbody>\n            {range(graphState.nbVertex).map((rowIndex: number) => (<tr key={rowIndex}>\n                <td>{vertexName(graphState, rowIndex)}</td>\n                {range(graphState.nbVertex).map((colIndex: number) => isModifiable(rowIndex, colIndex) ? (\n\n                    <td key={colIndex}\n                        style={{ backgroundColor: colorForScore100(score100(graphState, rowIndex, colIndex)) }}\n                    >\n                        {onGraphStateChange ?\n                            (\n                                <TextField\n                                    inputProps={{ min: \"0\", max: \"100\", step: \"5\" }}\n                                    type=\"number\" value={score100(graphState, rowIndex, colIndex)} onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                        const newScore = Number(e.target.value);\n                                        if (!isNaN(newScore)) {\n                                            onGraphStateChange(withScore100(graphState, rowIndex, colIndex, newScore));\n                                        }\n                                    }} />) : (<div>{Math.round(score100(graphState, rowIndex, colIndex))}</div>)}\n                    </td>) : <td></td>)}\n            </tr>))}\n        </tbody>\n    </table>","import { GraphState, score1, withScore1 } from './GraphState';\nimport { range } from './utils';\nexport type ComputeState = {\n    iterations: GraphState[];\n};\n\n\nexport const initialState = (initialState: GraphState): ComputeState => ({\n    iterations: [initialState]\n})\n\nexport const computeNextComputeState = (computeState: ComputeState) => {\n    const nextIterationIndex = computeState.iterations.length;\n    const lastIteration = computeState.iterations[nextIterationIndex - 1];\n    return {\n        iterations: [...computeState.iterations, computeNextIteration(lastIteration, nextIterationIndex)]\n    }\n};\n\nexport const needsAnotherIteration = (computeState: ComputeState) => {\n    return computeState.iterations.length < computeState.iterations[0].nbVertex\n}\n\nconst computeNextIteration = (graphState: GraphState, k: number): GraphState => {\n    let currentState = graphState;\n    for (let i of range(currentState.nbVertex)) {\n        for (let j of range(currentState.nbVertex)) {\n            const ijScore = score1(currentState, i, j) || 0;\n            const ikScore = score1(currentState, i, k) || 0;\n            const kjScore = score1(currentState, k, j) || 0;\n            const newScore = ikScore * kjScore;\n            if (ijScore < newScore) {\n                currentState = withScore1(currentState, i, j, newScore)\n            }\n        }\n    }\n    return currentState;\n}","import { Button, TextField, Typography } from '@material-ui/core';\nimport React, { ChangeEvent, } from 'react';\n\nimport { computeConfidenceScore, emptyGraph, GraphState } from './GraphState';\nimport { GraphStateTable } from './GraphStateTable';\nimport { range } from './utils';\nimport { ComputeState, initialState as createInitialComputeState, computeNextComputeState, needsAnotherIteration } from './ComputeState';\nimport { colorForScore1 } from './colorForScore';\n\n\nexport default function App() {\n  const [inputState, setInputState] = React.useState<GraphState>(emptyGraph(7));\n  const [delay, setDelay] = React.useState(300);\n  const [computeState, setComputeState] = React.useState<ComputeState | null>(null);\n\n  const handleCompute = () => {\n\n    let computeState = createInitialComputeState(inputState);\n    setComputeState(computeState);\n\n    const iterate = () => {\n      computeState = computeNextComputeState(computeState);\n      setComputeState(computeState);\n\n      if (needsAnotherIteration(computeState)) {\n        setTimeout(iterate, delay)\n      }\n    }\n    if (needsAnotherIteration(computeState)) {\n      setTimeout(iterate, delay)\n    }\n\n  }\n  return (\n    <div className=\"App\" style={{ display: 'flex' }}>\n      <div>\n        <Typography variant=\"h6\">Input</Typography>\n        <TextField\n          label=\"Matrix Size\"\n          type=\"number\"\n          value={inputState.nbVertex}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const nbVertex = Number(e.target.value);\n            if (!isNaN(nbVertex)) {\n              setInputState((inputState: GraphState) => ({\n                ...inputState,\n                nbVertex\n              }));\n            }\n          }}\n        />\n\n        <GraphStateTable graphState={inputState} onGraphStateChange={setInputState} />\n        <ConfidenceScore confidenceScore={computeConfidenceScore(inputState)} />\n      </div>\n\n      <div>\n        <Typography variant=\"h6\">New Confidence Score</Typography>\n        <div>\n          <Button onClick={handleCompute} disabled={computeState ? needsAnotherIteration(computeState) : false}>Compute now</Button>\n          <TextField\n            label=\"Iteartion Delay\"\n            type=\"number\"\n            disabled={computeState ? needsAnotherIteration(computeState) : false}\n            value={delay}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const delay = Number(e.target.value);\n              if (!isNaN(delay)) {\n                setDelay(delay);\n              }\n            }}\n          />\n        </div>\n\n\n        {computeState && computeState.iterations.map((_, i) => {\n          const reverseIndex = computeState.iterations.length - i - 1;\n          const iterationState = computeState.iterations[reverseIndex];\n\n          return (\n            <div key={reverseIndex}>\n              <h3>Iteration {reverseIndex}</h3>\n              <GraphStateTable graphState={iterationState} />\n              <ConfidenceScore confidenceScore={computeConfidenceScore(iterationState)} />\n            </div>\n          )\n        })}\n\n      </div>\n    </div>\n  );\n}\n\n\nconst ConfidenceScore = ({ confidenceScore }: { confidenceScore: number }) => (\n  <Typography variant=\"subtitle1\" style={{ backgroundColor: colorForScore1(confidenceScore) }}>Confidence Score:  {confidenceScore}</Typography>\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils.ts","colorForScore.tsx","graph/ForceGraph.tsx","ScoreBlock.tsx","state/GraphState.tsx","GraphStateTable.tsx","state/ComputeState.tsx","url/parseUrl.tsx","App.tsx","serviceWorker.ts","index.tsx","url/synchronizeUrl.tsx"],"names":["replaceSearchParams","href","params","newUrl","URL","search","urlParams","URLSearchParams","Object","entries","forEach","_ref","_ref2","slicedToArray","key","value","append","toString","buildQueryString","alphaName","index","String","fromCharCode","charCodeAt","red","tinycolor","hueDelta","toHsv","h","colors","range","map","i","redHsv","objectSpread","toRgbString","colorForScore","score100","rounded","Math","round","ForceGraph","graphState","_ref$width","width","_ref$height","height","_useMemo","useMemo","forceLink","d3Force","id","node","nodeName","distance","link","score","forceCenter","simulation","force","nodeRadius","strength","stop","nodes","links","_useMemo2","previousNodes","previousLinks","_buildGraphData","previousGraphData","oldNodes","keyBy","n","vertexNames","name","oldNode","x","y","nbVertex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","edgeId","vertexName","source","target","err","return","buildGraphData","updatedNodes","updatedLinks","alpha","tick","console","log","react_default","a","createElement","className","stroke","x1","y1","x2","y2","transform","concat","cx","cy","r","ScoreDisplay","number","style","display","textAlign","paddingRight","backgroundColor","color","mostReadable","GraphState","scoreMatrix","classCallCheck","this","createClass","hgs","vertexNameSet","Set","keys","edgeStr","_parseEdge","parseEdge","_parseEdge2","vertex1","vertex2","add","Array","from","sort","vertexIndexByName","reduce","previous","state","_parseEdge3","_parseEdge4","withScore100","length","withVertexNames","slice","vertexIndex","newScore","Error","matrix","normalized","normalize","newRow","toConsumableArray","newScores","e","createEmpty","confidenceScore","max","min","edgeScores","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","edge","verticesInEdge","split","GraphStateTable","onGraphStateChange","colIndex","rowIndex","TextField","inputProps","step","type","onChange","Number","isNaN","Typography","variant","ScoreBlock_ScoreDisplay","initialState","iterations","computeNextComputeState","computeState","k","lastIteration","computeNextIteration","needsAnotherIteration","newState","j","ijScore","score1","EDGES_PARAM","graphStateFromUrl","window","location","has","fromEdgeScores","JSON","parse","get","DELAY_PARAM","delayFromUrl","AUTO_COMPUTE_PARAM","autoComputeFromUrl","ConfidenceScore","Boolean","hostname","match","ReactDOM","render","_React$useState","React","useState","_React$useState2","autoCompute","setAutoCompute","_React$useState3","_React$useState4","inputState","setInputState","_React$useState5","_React$useState6","toCompute","setToCompute","_React$useState7","_React$useState8","delay","setDelay","_React$useState9","_React$useState10","setComputeState","handleInputStateChange","useEffect","_searchParams","searchParams","defineProperty","stringify","toEdgeScores","originalHref","newHref","history","pushState","synchronizeUrl","timeoutId","createInitialComputeState","setTimeout","iterate","clearTimeout","label","withNbVertex","Button","onClick","withResetedScores","GraphStateTable_GraphStateTable","App_ConfidenceScore","computeConfidenceScore","ForceGraph_ForceGraph","FormControlLabel","control","Checkbox","checked","disabled","_","reverseIndex","iterationState","flexDirection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b445f8f.chunk.js","sourcesContent":["export { range } from \"lodash\";\n\nexport type SearchParams = { [param: string]: string };\nexport const buildQueryString = (params: SearchParams) => {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) =>\n    urlParams.append(key, value)\n  );\n  return urlParams.toString();\n};\n\nexport const replaceSearchParams = (\n  href: string,\n  params: SearchParams\n): string => {\n  const newUrl = new URL(href);\n  newUrl.search = buildQueryString(params);\n  return newUrl.href;\n};\n\nexport const round2Digits = (number: number) => {\n  return Math.round(number * 100) / 100;\n};\n\nexport const alphaName = (index: number) => {\n  return String.fromCharCode(\"A\".charCodeAt(0) + index);\n};\n","import { range } from \"./utils\";\nimport tinycolor from \"tinycolor2\";\nconst red = tinycolor(\"#f44335\");\nconst green = tinycolor(\"#4caf50\");\nconst hueDelta = green.toHsv().h - red.toHsv().h;\nconst colors = range(100).map(i => {\n  const redHsv = red.toHsv();\n  return tinycolor({\n    ...redHsv,\n    h: redHsv.h + (hueDelta * i) / 100\n  }).toRgbString();\n});\n// console.log(\"colors:\", colors, \"hueDelta\", hueDelta);\nexport const colorForScore = (score100: number) => {\n  const rounded = Math.round(score100);\n  if (rounded === 0) {\n    return \"\";\n  }\n  return colors[rounded - 1];\n};\n\nexport const contrastColorForScore = (score100: number) => {\n  return tinycolor\n    .mostReadable(colorForScore(score100), [\"white\", \"black\"])\n    .toString();\n};\n","import * as d3Force from \"d3-force\";\nimport { SimulationLinkDatum, SimulationNodeDatum } from \"d3-force\";\nimport { keyBy } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport { colorForScore } from \"../colorForScore\";\nimport { GraphState } from \"../state/GraphState\";\nimport { range } from \"../utils\";\nimport \"./ForceGraph.css\";\n\ntype NodeDatum = SimulationNodeDatum & {\n  nodeName: string;\n};\n\ntype LinkDatum = SimulationLinkDatum<NodeDatum> & {\n  edgeId: string;\n  score: number;\n};\n\ntype GraphData = {\n  nodes: NodeDatum[];\n  links: LinkDatum[];\n};\n\nconst buildGraphData = (\n  graphState: GraphState,\n  previousGraphData: GraphData | null\n): GraphData => {\n  const oldNodes = keyBy(\n    previousGraphData ? previousGraphData.nodes : [],\n    n => n.nodeName\n  );\n\n  const nodes: NodeDatum[] = graphState.vertexNames.map((name, index) => {\n    const node: NodeDatum = {\n      nodeName: name,\n      index: index\n    };\n    const oldNode = oldNodes[name];\n    if (oldNode) {\n      node.x = oldNode.x;\n      node.y = oldNode.y;\n    }\n    return node;\n  });\n\n  const n = graphState.nbVertex();\n  const links: LinkDatum[] = [];\n  for (let x of range(0, n)) {\n    for (let y of range(x + 1, n)) {\n      const score = graphState.score100(x, y);\n      if (score !== 0) {\n        links.push({\n          edgeId: graphState.vertexName(x) + \"-\" + graphState.vertexName(y),\n          source: graphState.vertexName(x),\n          target: graphState.vertexName(y),\n          score\n        });\n      }\n    }\n  }\n  return { links, nodes };\n};\n\nconst nodeRadius = 20;\nexport const ForceGraph = ({\n  graphState,\n  width = 400,\n  height = 400\n}: {\n  graphState: GraphState;\n  width?: number;\n  height?: number;\n}) => {\n  const { simulation, forceCenter, forceLink } = useMemo(() => {\n    const nodes: NodeDatum[] = [];\n    const links: LinkDatum[] = [];\n    const useDecayingLinkStength = false;\n    const forceLink = d3Force\n      .forceLink<NodeDatum, LinkDatum>()\n      .id((node: NodeDatum) => node.nodeName);\n    // SHould we use a decaying strength instead\n    if (useDecayingLinkStength) {\n      forceLink\n        .distance(() => 10)\n        .strength(link => (link.score * link.score) / (100 * 100));\n    } else {\n      forceLink.distance(link => 30 + (1 - link.score / 100) * 100);\n    }\n    const forceCenter = d3Force.forceCenter();\n    const simulation = d3Force\n      .forceSimulation<NodeDatum, LinkDatum>()\n      .force(\"link\", forceLink)\n      .force(\"collide\", d3Force.forceCollide(nodeRadius * 1.5))\n      .force(\"charge\", d3Force.forceManyBody().strength(() => 15))\n      .force(\"center\", forceCenter)\n      .stop()\n      .nodes(nodes);\n    forceLink.links(links);\n    return { simulation, forceCenter, forceLink };\n  }, []);\n\n  const { updatedNodes, updatedLinks } = useMemo(() => {\n    // Update simulation\n    const previousNodes: NodeDatum[] = simulation.nodes();\n    const previousLinks: LinkDatum[] = forceLink.links();\n    const { nodes: updatedNodes, links: updatedLinks } = buildGraphData(\n      graphState,\n      { nodes: previousNodes, links: previousLinks }\n    );\n    // Reconfigure simulation\n    forceCenter.x(width / 2);\n    forceCenter.y(height / 2);\n    simulation.nodes(updatedNodes);\n    forceLink.links(updatedLinks);\n\n    // Run simulation\n    simulation.alpha(1);\n    for (var i = 0; i < 300; ++i) simulation.tick();\n    console.log(\"nodes\", updatedNodes);\n    console.log(\"links\", updatedLinks);\n\n    return { updatedNodes, updatedLinks };\n  }, [simulation, graphState, height, width, forceCenter, forceLink]);\n\n  return (\n    <svg width={width} height={height}>\n      <g className=\"ForceGraph__Links\">\n        {updatedLinks.map(link => (\n          <line\n            key={link.edgeId}\n            className=\"ForceGraph__Link\"\n            stroke={colorForScore(link.score)}\n            x1={(link.source as NodeDatum).x as number}\n            y1={(link.source as NodeDatum).y as number}\n            x2={(link.target as NodeDatum).x as number}\n            y2={(link.target as NodeDatum).y as number}\n          />\n        ))}\n      </g>\n      <g className=\"ForceGraph__Nodes\">\n        {updatedNodes.map(node => (\n          <g\n            key={node.nodeName}\n            className=\"ForceGraph__NodeGroup\"\n            transform={`translate(${(node.x as number) -\n              nodeRadius / 2},${(node.y as number) - nodeRadius / 2})`}\n          >\n            <circle\n              className=\"ForceGraph__NodeCircle\"\n              cx={nodeRadius / 2}\n              cy={nodeRadius / 2}\n              r={nodeRadius}\n            ></circle>\n            <text\n              className=\"ForceGraph__NodeText\"\n              x={nodeRadius / 2}\n              y={nodeRadius / 2}\n            >\n              {node.nodeName}\n            </text>\n            <title>{node.nodeName}</title>\n          </g>\n        ))}\n      </g>\n    </svg>\n  );\n};\n\n// nodes.fo;\n// const svgRef = useRef<SVGSVGElement>(null);\n// let [previousGraphData, setPreviousGraphData] = useState<GraphData | null>(\n//   null\n// );\n\n// const graphData = useMemo(\n//   () => buildGraphData(graphState, previousGraphData),\n//   // previousGraphData is omitied on purpose here... This is a code smell but I can't figure it out\n//   [graphState]\n// );\n// if (previousGraphData !== graphData) {\n//   setPreviousGraphData(graphData);\n// }\n\n// const svgElement: SVGSVGElement | null = svgRef.current;\n// useEffect(() => {\n//   if (svgElement === null) {\n//     return;\n//   }\n\n//   forceLink.links(graphData.links);\n//   for (var i = 0; i < 300; ++i) simulation.tick();\n\n//   const svgSel = d3Selection.select(svgElement);\n//   const linkSel = svgSel\n//     .append(\"g\")\n//     .attr(\"class\", \"ForceGraph__Links\")\n//     .selectAll(\"line\")\n//     .data(graphData.links)\n//     .enter()\n//     .append(\"line\")\n//     .attr(\"stroke\", (d: LinkDatum) => colorForScore(d.score));\n//   linkSel.append(\"title\").text(function(d: LinkDatum) {\n//     return d.edgeId + \": \" + d.score;\n//   });\n\n//   const nodeGroupSel = svgSel\n//     .append(\"g\")\n//     .attr(\"class\", \"ForceGraph__Nodes\")\n//     .selectAll(\"g\")\n//     .data(graphData.nodes)\n//     .enter()\n//     .append(\"g\")\n//     .attr(\"class\", \"ForceGraph__NodeGroup\");\n\n//   nodeGroupSel\n//     .append(\"circle\")\n//     .attr(\"class\", \"ForceGraph__NodeCircle\")\n//     .attr(\"cx\", nodeRadius / 2)\n//     .attr(\"cy\", nodeRadius / 2)\n//     .attr(\"r\", nodeRadius);\n\n//   nodeGroupSel\n//     .append(\"text\")\n//     .attr(\"class\", \"ForceGraph__NodeText\")\n//     .attr(\"x\", nodeRadius / 2)\n//     .attr(\"y\", nodeRadius / 2)\n//     .text(d => d.nodeName);\n\n//   nodeGroupSel.append(\"title\").text(d => d.nodeName);\n//   //.call(createDragCall(simulation))\n\n//   function ticked() {\n//     linkSel\n//       .attr(\"x1\", function(d: LinkDatum) {\n//         return (d.source as NodeDatum).x as number;\n//       })\n//       .attr(\"y1\", function(d: LinkDatum) {\n//         return (d.source as NodeDatum).y as number;\n//       })\n//       .attr(\"x2\", function(d: LinkDatum) {\n//         return (d.target as NodeDatum).x as number;\n//       })\n//       .attr(\"y2\", function(d: LinkDatum) {\n//         return (d.target as NodeDatum).y as number;\n//       });\n\n//     nodeGroupSel.attr(\"transform\", function(d: NodeDatum) {\n//       return `translate(${(d.x as number) -\n//         nodeRadius / 2},${(d.y as number) - nodeRadius / 2})`;\n//     });\n//   }\n//   return () => {\n//     simulation.stop();\n//     while (svgElement.firstChild) {\n//       svgElement.removeChild(svgElement.firstChild);\n//     }\n//     // TODO remove previous nodes?\n//   };\n// }, [width, height, svgElement, graphData]);\n","import React from \"react\";\n\nimport { colorForScore, contrastColorForScore } from \"./colorForScore\";\nimport { round2Digits } from \"./utils\";\n\nexport const ScoreDisplay = ({ score }: { score: number }) => (\n  <div\n    style={{\n      display: \"inline-block\",\n      width: \"50px\",\n      textAlign: \"right\",\n      paddingRight: \"8px\",\n      backgroundColor: colorForScore(score),\n      color: contrastColorForScore(score)\n    }}\n  >\n    {round2Digits(score)}\n  </div>\n);\n","import { range, alphaName } from \"../utils\";\n\n// export type GraphState = {\n//   nbVertex: number;\n//   scoreMatrix: ScoreMatrix;\n// };\n\nexport type ScoreMatrix = ReadonlyArray<ReadonlyArray<number>>;\n\nexport class GraphState {\n  public static fromEdgeScores(hgs: EdgeScores) {\n    const vertexNameSet = new Set<string>();\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      vertexNameSet.add(vertex1);\n      vertexNameSet.add(vertex2);\n    });\n    const vertexNames = Array.from(vertexNameSet).sort();\n    type VertexIndexByName = {\n      [vertexName: string]: number;\n    };\n    const vertexIndexByName: VertexIndexByName = vertexNames.reduce(\n      (previous: VertexIndexByName, vertexName, index) => {\n        previous[vertexName] = index;\n        return previous;\n      },\n      {}\n    );\n\n    let state = new GraphState(vertexNames, []);\n    Object.keys(hgs).forEach(edgeStr => {\n      const [vertex1, vertex2] = parseEdge(edgeStr);\n      state = state.withScore100(\n        vertexIndexByName[vertex1],\n        vertexIndexByName[vertex2],\n        hgs[edgeStr]\n      );\n    });\n\n    return state;\n  }\n\n  private constructor(\n    public vertexNames: ReadonlyArray<string>,\n    private readonly scoreMatrix: ScoreMatrix\n  ) {}\n\n  public static createEmpty = (\n    vertexNames: ReadonlyArray<string>\n  ): GraphState => {\n    return new GraphState(vertexNames, []);\n  };\n  public score100(x: number, y: number): number {\n    if (x === y) {\n      return 100;\n    }\n    if (x > y) {\n      return this.score100(y, x);\n    }\n    const row = this.scoreMatrix[x] || [];\n    return row[y] || 0;\n  }\n\n  public score1(x: number, y: number): number {\n    return this.score100(x, y) / 100;\n  }\n\n  public nbVertex() {\n    return this.vertexNames.length;\n  }\n\n  public withNbVertex(nbVertex: number): GraphState {\n    if (nbVertex < this.vertexNames.length) {\n      return this.withVertexNames(this.vertexNames.slice(0, nbVertex));\n    } else {\n      return this.withVertexNames(range(nbVertex).map(alphaName));\n    }\n  }\n  public withVertexNames(vertexNames: string[]): GraphState {\n    return new GraphState(vertexNames, this.scoreMatrix);\n  }\n\n  public vertexName(vertexIndex: number): string {\n    return this.vertexNames[vertexIndex];\n  }\n\n  public withScore100(x: number, y: number, newScore: number): GraphState {\n    if (x === y) {\n      throw new Error(\"Score not modifiable\");\n    }\n    if (x > y) {\n      return this.withScore100(y, x, newScore);\n    } else {\n      try {\n        const matrix = this.scoreMatrix;\n        const normalized = this.normalize(newScore);\n        const newRow = [...(matrix[x] || [])];\n        if (normalized === newRow[y]) {\n          // No change made\n          return this;\n        } else {\n          newRow[y] = normalized;\n          const newScores = [...matrix];\n          newScores[x] = newRow;\n          return new GraphState(this.vertexNames, newScores);\n        }\n      } catch (e) {\n        console.log(e);\n        throw e;\n      }\n    }\n  }\n\n  public withResetedScores(): GraphState {\n    return GraphState.createEmpty(this.vertexNames);\n  }\n\n  public computeConfidenceScore() {\n    const n = this.nbVertex();\n    let confidenceScore = 0;\n\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const newLocal = this.score100(x, y);\n        confidenceScore += newLocal || 0;\n      }\n    }\n    return confidenceScore / ((n * (n - 1)) / 2);\n  }\n\n  private normalize(score: number): number {\n    return Math.max(Math.min(score, 100), 0);\n  }\n\n  public toEdgeScores(): EdgeScores {\n    const edgeScores: EdgeScores = {};\n    const n = this.nbVertex();\n    for (let x of range(0, n)) {\n      for (let y of range(x + 1, n)) {\n        const score = this.score100(x, y);\n        if (score !== 0) {\n          const edgeStr = this.vertexName(x) + \"-\" + this.vertexName(y);\n          edgeScores[edgeStr] = score;\n        }\n      }\n    }\n    return edgeScores;\n  }\n}\n\nexport const isModifiable = (x: number, y: number) => {\n  return x < y;\n};\n\nexport const vertexName = (\n  graphState: GraphState,\n  vertexIndex: number\n): string => {\n  return graphState.vertexName(vertexIndex);\n};\n\ntype EdgeScores = {\n  [edge: string]: number;\n};\n\nconst parseEdge = (edge: string): [string, string] => {\n  const verticesInEdge = edge.split(\"-\");\n  if (verticesInEdge.length !== 2) {\n    throw new Error(\n      \"Invalid edge def \" + edge + \". It must be of form <Node1>-<Node2>\"\n    );\n  }\n  const vertex1 = verticesInEdge[0];\n  const vertex2 = verticesInEdge[1];\n  if (vertex1 === vertex2) {\n    throw new Error(\"Edge def \" + edge + \" uses twice the same node\");\n  }\n  if (vertex1 < vertex2) {\n    return [vertex1, vertex2];\n  } else {\n    return [vertex2, vertex1];\n  }\n};\n","import { TextField, Typography } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\n\nimport { colorForScore } from \"./colorForScore\";\nimport { ScoreDisplay } from \"./ScoreBlock\";\nimport { GraphState, isModifiable } from \"./state/GraphState\";\nimport { range } from \"./utils\";\n\nexport const GraphStateTable = ({\n  graphState,\n  onGraphStateChange\n}: {\n  graphState: GraphState;\n  onGraphStateChange?: (newState: GraphState) => void;\n}) => (\n  <table>\n    <thead>\n      <tr>\n        <td />\n        {range(graphState.nbVertex()).map(\n          (colIndex: number) =>\n            colIndex >= 1 && (\n              <td key={colIndex} style={{ textAlign: \"center\" }}>\n                {graphState.vertexName(colIndex)}\n              </td>\n            )\n        )}\n      </tr>\n    </thead>\n    <tbody>\n      {range(graphState.nbVertex()).map(\n        (rowIndex: number) =>\n          rowIndex < graphState.nbVertex() - 1 && (\n            <tr key={rowIndex}>\n              <td style={{ textAlign: \"right\" }}>\n                {graphState.vertexName(rowIndex)}\n              </td>\n              {range(graphState.nbVertex()).map(\n                (colIndex: number) =>\n                  colIndex >= 1 &&\n                  (isModifiable(rowIndex, colIndex) ? (\n                    <td\n                      key={colIndex}\n                      style={{\n                        backgroundColor: colorForScore(\n                          graphState.score100(rowIndex, colIndex)\n                        ),\n                        width: \"50px\"\n                      }}\n                    >\n                      {onGraphStateChange ? (\n                        <TextField\n                          inputProps={{\n                            min: \"0\",\n                            max: \"100\",\n                            step: \"5\",\n                            style: {\n                              textAlign: \"right\"\n                            }\n                          }}\n                          type=\"number\"\n                          value={graphState.score100(rowIndex, colIndex)}\n                          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newScore = Number(e.target.value);\n                            if (!isNaN(newScore)) {\n                              onGraphStateChange(\n                                graphState.withScore100(\n                                  rowIndex,\n                                  colIndex,\n                                  newScore\n                                )\n                              );\n                            }\n                          }}\n                        />\n                      ) : (\n                        <Typography variant=\"subtitle1\">\n                          <ScoreDisplay\n                            score={graphState.score100(rowIndex, colIndex)}\n                          />\n                        </Typography>\n                      )}\n                    </td>\n                  ) : (\n                    <td key={colIndex}></td>\n                  ))\n              )}\n            </tr>\n          )\n      )}\n    </tbody>\n  </table>\n);\n","import { GraphState } from \"./GraphState\";\nimport { range } from \"../utils\";\nexport type ComputeState = {\n  iterations: GraphState[];\n};\n\nexport const initialState = (initialState: GraphState): ComputeState => ({\n  iterations: [initialState]\n});\n\nexport const computeNextComputeState = (computeState: ComputeState) => {\n  const k = computeState.iterations.length - 1;\n  const lastIteration = computeState.iterations[k];\n  return {\n    iterations: [\n      ...computeState.iterations,\n      computeNextIteration(lastIteration, k)\n    ]\n  };\n};\n\nexport const needsAnotherIteration = (computeState: ComputeState) => {\n  return (\n    computeState.iterations.length < computeState.iterations[0].nbVertex() + 1\n  );\n};\n\n// Floyd-Warshall algorithm\n// https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm\nconst computeNextIteration = (\n  graphState: GraphState,\n  k: number\n): GraphState => {\n  console.log(\"k (0 based): \" + k);\n  let newState = graphState;\n  for (let i of range(newState.nbVertex())) {\n    for (let j of range(newState.nbVertex())) {\n      const ijScore = newState.score1(i, j);\n      const ikScore = newState.score1(i, k);\n      const kjScore = newState.score1(k, j);\n      const newScore = ikScore * kjScore;\n      if (ijScore < newScore) {\n        // FIXME we should not do rounding hre\n        newState = newState.withScore100(i, j, newScore * 100);\n      }\n    }\n  }\n  console.log(\"graphState\", graphState, \"newGrpahState\", newState);\n  return newState;\n};\n","import { GraphState } from \"../state/GraphState\";\nimport { alphaName, range } from \"../utils\";\n\nexport const EDGES_PARAM = \"edges\";\nexport const graphStateFromUrl = (): GraphState => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(EDGES_PARAM)) {\n    try {\n      return GraphState.fromEdgeScores(\n        JSON.parse(params.get(EDGES_PARAM) as string)\n      );\n    } catch (e) {}\n  }\n  return GraphState.createEmpty(range(0, 7).map(alphaName));\n};\n\nexport const DELAY_PARAM = \"delay\";\nexport const delayFromUrl = (): number => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(DELAY_PARAM)) {\n    try {\n      return Number(params.get(DELAY_PARAM));\n    } catch (e) {}\n  }\n  return 300;\n};\n\nexport const AUTO_COMPUTE_PARAM = \"auto\";\nexport const autoComputeFromUrl = (): boolean => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has(AUTO_COMPUTE_PARAM)) {\n    return params.get(AUTO_COMPUTE_PARAM) === \"true\";\n  }\n  return false;\n};\n","import \"./App.css\";\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport React, { ChangeEvent, useEffect } from \"react\";\nimport { ForceGraph } from \"./graph/ForceGraph\";\nimport { GraphStateTable } from \"./GraphStateTable\";\nimport {\n  computeNextComputeState,\n  ComputeState,\n  initialState as createInitialComputeState,\n  needsAnotherIteration\n} from \"./state/ComputeState\";\nimport { GraphState } from \"./state/GraphState\";\nimport {\n  autoComputeFromUrl,\n  delayFromUrl,\n  graphStateFromUrl\n} from \"./url/parseUrl\";\nimport { synchronizeUrl } from \"./url/synchronizeUrl\";\nimport { ScoreDisplay } from \"./ScoreBlock\";\n\nexport default function App() {\n  const [autoCompute, setAutoCompute] = React.useState(autoComputeFromUrl());\n  const [inputState, setInputState] = React.useState<GraphState>(\n    graphStateFromUrl()\n  );\n  const [toCompute, setToCompute] = React.useState<GraphState | null>(\n    autoCompute ? inputState : null\n  );\n  const [delay, setDelay] = React.useState(delayFromUrl());\n  const [computeState, setComputeState] = React.useState<ComputeState | null>(\n    null\n  );\n\n  const handleAutoComputeChange = (autoCompute: boolean): void => {\n    setAutoCompute(autoCompute);\n    if (autoCompute) {\n      setToCompute(inputState);\n    }\n  };\n\n  const handleInputStateChange = (state: GraphState): void => {\n    setInputState(state);\n    if (autoCompute) {\n      setToCompute(state);\n    }\n  };\n\n  useEffect(() => {\n    synchronizeUrl(delay, autoCompute, inputState);\n  }, [inputState, autoCompute, delay]);\n\n  useEffect(() => {\n    if (toCompute === null) {\n      return;\n    }\n    let computeState = createInitialComputeState(toCompute);\n    setComputeState(computeState);\n    let timeoutId: any;\n\n    const iterate = () => {\n      computeState = computeNextComputeState(computeState);\n      setComputeState(computeState);\n\n      if (needsAnotherIteration(computeState)) {\n        timeoutId = setTimeout(iterate, delay);\n      }\n    };\n    if (needsAnotherIteration(computeState)) {\n      timeoutId = setTimeout(iterate, delay);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [toCompute, delay]);\n\n  const handleComputeNow = () => {\n    setToCompute(inputState);\n  };\n  return (\n    <div className=\"App\" style={{ display: \"flex\", height: \"1vh\" }}>\n      <div>\n        <Typography variant=\"h5\">Input</Typography>\n        <TextField\n          label=\"Node Count\"\n          type=\"number\"\n          value={inputState.nbVertex()}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const nbVertex = Number(e.target.value);\n            if (!isNaN(nbVertex)) {\n              handleInputStateChange(inputState.withNbVertex(nbVertex));\n            }\n          }}\n        />\n        <Button\n          onClick={() => {\n            handleInputStateChange(inputState.withResetedScores());\n          }}\n        >\n          Clear Scores\n        </Button>\n\n        <GraphStateTable\n          graphState={inputState}\n          onGraphStateChange={handleInputStateChange}\n        />\n        <ConfidenceScore\n          confidenceScore={inputState.computeConfidenceScore()}\n        />\n        <pre>{JSON.stringify(inputState.toEdgeScores(), null, \"  \")}</pre>\n        <ForceGraph graphState={inputState}></ForceGraph>\n      </div>\n\n      <div>\n        <Typography variant=\"h5\">New Confidence Score</Typography>\n        <div>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={autoCompute}\n                onChange={(e: any, checked: boolean) => {\n                  handleAutoComputeChange(checked);\n                }}\n              />\n            }\n            label=\"Auto Compute\"\n          />\n\n          {!autoCompute && (\n            <Button\n              onClick={handleComputeNow}\n              disabled={\n                computeState ? needsAnotherIteration(computeState) : false\n              }\n            >\n              Compute now\n            </Button>\n          )}\n          <TextField\n            label=\"Iteartion Delay\"\n            type=\"number\"\n            disabled={\n              computeState ? needsAnotherIteration(computeState) : false\n            }\n            value={delay}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const delay = Number(e.target.value);\n              if (!isNaN(delay)) {\n                setDelay(delay);\n              }\n            }}\n          />\n        </div>\n\n        {computeState &&\n          computeState.iterations.map((_, i) => {\n            const reverseIndex = computeState.iterations.length - i - 1;\n            const iterationState = computeState.iterations[reverseIndex];\n\n            return (\n              <div\n                key={reverseIndex}\n                style={{ display: \"flex\", flexDirection: \"row\" }}\n              >\n                <div>\n                  <Typography variant=\"h6\">\n                    {reverseIndex === 0\n                      ? \"Input State\"\n                      : \"k=\" +\n                        (reverseIndex - 1) +\n                        \" - going through \" +\n                        iterationState.vertexName(reverseIndex - 1)}\n                  </Typography>\n                  <GraphStateTable graphState={iterationState} />\n\n                  <ConfidenceScore\n                    confidenceScore={iterationState.computeConfidenceScore()}\n                  />\n                </div>\n                <div>\n                  <ForceGraph graphState={iterationState} />\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nconst ConfidenceScore = ({ confidenceScore }: { confidenceScore: number }) => (\n  <Typography variant=\"subtitle1\">\n    Confidence Score: <ScoreDisplay score={confidenceScore} />\n  </Typography>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { GraphState } from \"../state/GraphState\";\nimport { replaceSearchParams, SearchParams } from \"../utils\";\nimport { AUTO_COMPUTE_PARAM, DELAY_PARAM, EDGES_PARAM } from \"./parseUrl\";\n\nexport function synchronizeUrl(\n  delay: number,\n  autoCompute: boolean,\n  inputState: GraphState\n) {\n  const searchParams: SearchParams = {\n    [DELAY_PARAM]: String(delay),\n    [AUTO_COMPUTE_PARAM]: String(autoCompute),\n    [EDGES_PARAM]: JSON.stringify(inputState.toEdgeScores())\n  };\n  const originalHref = window.location.href;\n  const newHref = replaceSearchParams(originalHref, searchParams);\n  if (newHref !== originalHref) {\n    window.history.pushState(\"\", \"Update Params\", newHref);\n  }\n}\n"],"sourceRoot":""}